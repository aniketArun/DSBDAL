# -*- coding: utf-8 -*-
"""2DataWraggling.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b5OKkzoLke82LbwSd_9XDFHi3AD1Il8r
"""

import pandas as pd
import numpy as np

df=pd.read_csv("student_dataset.csv") #read the dataset
df

#plot the graph using boxplot for each column
col = ['math score', 'reading score' , 'writing score','placement score']
df.boxplot(col)

print(np.where(df['math score']>90))
print(np.where(df['reading score']<25))
print(np.where(df['writing score']<30))

"""Import Matplotlib for graph plotting"""

import matplotlib.pyplot as plt

"""Detecting the outlires using the scatter plot agains placement score and placement offer"""

fig, ax = plt.subplots(figsize = (18,10))
ax.scatter(df['placement score'], df['placement offer count'])
plt.show()

"""Print the outlies with reference the scatter plot, **It will going to return a tuple**"""

print(np.where((df['placement score']<50) & (df['placement offer count']>1)))
print(np.where((df['placement score']>85) & (df['placement offer count']<3)))

"""Print the outlies with values using iloc function over dataframe"""

df.iloc[6]

df.iloc[11]

"""**Detecting the outliers using the z-score **"""

# import the scipy lib
from scipy import stats

"""Calculate the z score for the math column"""

z = np.abs(stats.zscore(df['math score']))
z

"""Define the threshold for the zscore"""

threshold = 0.18

#display the sample outlires
sample_outliers = np.where(z <threshold)
sample_outliers

for i in sample_outliers:
  print(df.iloc[i])

"""**Detecting outliers using Inter Quantile Range(IQR):**

Sort the reading score
"""

sorted_rscore= sorted(df['reading score'])
sorted_rscore

"""Calculate and print Quartile 1 and Quartile 2"""

q1 = np.percentile(sorted_rscore, 25)
q3 = np.percentile(sorted_rscore, 75)
print(q1,q3)

"""Calculate the IQR"""

IQR = q3-q1
IQR

"""Calculate the upper bound and the lower bound"""

lwr_bound = q1-(1.5*IQR)
upr_bound = q3+(1.5*IQR)
print("Lower Bound : ", lwr_bound, "Upper Bound: ", upr_bound)

"""Print the outliers as we have the upper and lower bound"""

r_outliers = [i for i in sorted_rscore if (i < lwr_bound or i > upr_bound)]
# for i in sorted_rscore:
#   if (i < lwr_bound or i  >upr_bound):
#     r_outliers.append(i)
print(r_outliers)

"""**HANDLING THE OUTLIERS**

Trimming/removing the outlier
"""

new_df = df
for i in sample_outliers:
  new_df.drop(i,inplace = True)
new_df #here outliers with index in sample_outliers are deleted

"""**Quantile based flooring and capping**

90th percentile and 10th percentile

percentile : that means you scored better than 90% of people who took the test and have performed well compared to others.
**A percentile provides more granular information regarding the performance of your test, which is obtained by comparing it with other tests in the database.**
"""

df_stud = df
ninetieth_percentile = np.percentile(df_stud['math score'], 90)
b = np.where(df_stud['math score']>ninetieth_percentile, ninetieth_percentile, df_stud['math score'])
print("New array:", b)

df_stud.insert(1,"m score",b,True)
df_stud

"""**Mean/Median imputation**
Plot the box plot for reading score
"""

col = ['reading score']
df.boxplot(col)

"""Calculate the median of reading score by using sorted_rscore"""

median=np.median(sorted_rscore)
median

"""Replace the upper bound outliers using median value"""

refined_df=df
refined_df['reading score'] = np.where(refined_df['reading score'] > upr_bound, median,refined_df['reading score'])

"""Display the refined Dataframe"""

refined_df

"""Replace the lower bound outliers using median value"""

refined_df['reading score'] = np.where(refined_df['reading score'] <lwr_bound, median,refined_df['reading score'])
refined_df

"""Draw the box plot for redefined_df"""

col = ['reading score']
refined_df.boxplot(col)